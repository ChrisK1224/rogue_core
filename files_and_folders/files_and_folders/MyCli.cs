using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text;

namespace files_and_folders
{
    public static class MyCli
    {
        public static string RunCommand(string cmd)
        {
            cmd = "/C " + cmd;
            //var proc = Process.Start("cmd.exe", cmd);
            //Console.Clear();
            using (Process process = Process.Start("cmd.exe", cmd))
            {
                process.WaitForExit();
                //string stderr = process.StandardOutput.ReadToEnd(); // Here are the exceptions from our Python script
                //string returnData = reader.ReadToEnd();// Here is the result of StdOut(for example: print "test")
                return "";
                //using (StreamReader reader = process.StandardOutput)
                //{
                //    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                //    string returnData = reader.ReadToEnd();// Here is the result of StdOut(for example: print "test")
                //    process.WaitForExit();
                //    return returnData;
                //}
            }
        }
        public static string RunCommandOLD(string cmdTxt)
        {
            //Console.Clear();
            Process cmd = new Process();
            cmd.StartInfo.FileName = "cmd.exe";
            cmd.StartInfo.RedirectStandardInput = true;
            cmd.StartInfo.RedirectStandardOutput = true;
            cmd.StartInfo.CreateNoWindow = true;
            cmd.StartInfo.UseShellExecute = false;
            cmd.Start();

            cmd.StandardInput.WriteLine(cmdTxt);
            cmd.StandardInput.Flush();
            cmd.StandardInput.Close();
            cmd.WaitForExit();
            return cmd.StandardOutput.ReadToEnd();
        }
        //public static string RunShellCommand(string cmd)
        //{
        //    string ret = "";
        //    using (PowerShell powerShell = PowerShell.Create())
        //    {
        //        powerShell.AddScript(txtInput.Text);
        //        powerShell.AddCommand("Out-String");
        //        Collection<PSObject> PSOutput = powerShell.Invoke();
        //        StringBuilder stringBuilder = new StringBuilder();
        //        foreach (PSObject pSObject in PSOutput)
        //            stringBuilder.AppendLine(pSObject.ToString());
        //        ret = stringBuilder.ToString();
        //    }
        //    return ret;
        //}

        public static string RunPythonCommand(string cmd, string[] args)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = @"C:\Users\Chris\AppData\Local\Programs\Python\Python39\python.exe";
            switch (args.Length)
            {
                case 1:
                    start.Arguments = string.Format("\"{0}\" \"{1}\"", cmd, args[0]);
                    break;
                case 2:
                    start.Arguments = string.Format("{0} {1} {2}", cmd, args[0], args[1]);
                    break;
                case 3:
                    start.Arguments = string.Format("\"{0}\" \"{1}\" \"{2}\" \"{3}\"", cmd, args[0], args[1], args[2]);
                    break;
                case 4:
                    start.Arguments = string.Format("\"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"", cmd, args[0], args[1], args[2], args[3]);
                    break;
                case 5:
                    start.Arguments = string.Format("\"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\"", cmd, args[0], args[1], args[2], args[3], args[4]);
                    break;
                case 6:
                    start.Arguments = string.Format("\"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" \"{6}\"", cmd, args[0], args[1], args[2], args[3], args[4], args[5]);
                    break;
                case 7:
                    start.Arguments = string.Format("\"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" \"{6}\" \"{7}\"", cmd, args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                    break;
            }
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    string resultPath = reader.ReadToEnd();// Here is the result of StdOut(for example: print "test")
                    process.WaitForExit();
                    return resultPath;
                }

            }

        }
    }
}